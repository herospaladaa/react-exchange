{"version":3,"sources":["components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["cards","props","react_default","a","createElement","className","mataUang","style","textAlign","parseFloat","oneDollars","usd","toFixed","toString","replace","definition","onClick","clickDelete","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rates","reqSymbols","name","addCurency","e","preventDefault","current","value","toUpperCase","add","push","console","log","setState","addForm","reset","removeSymbol","i","splice","React","createRef","_this2","axios","get","then","response","data","_this3","keys","map","key","index","idx","findIndex","x","Cards_Cards","bind","opts","ref","type","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e72ac31.chunk.js","sourcesContent":["import React from 'react';\nimport './Cards.css';\n\nconst cards = (props) => {\n    return (\n        <div className=\"card marginBottomCards\">\n            <div className=\"card-body\">\n                <div className=\"row\">\n                    <div className=\"col-10\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <h5>{props.mataUang}</h5>\n                            </div>\n                            <div className=\"col\">\n                                <h5 style={{ textAlign: \"right\" }}>{parseFloat(props.oneDollars * props.usd).toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h5>\n                            </div>\n                        </div>\n                        <small><i>{props.mataUang} - {props.definition}</i><br /></small>\n                        <small><i>1 USD = {props.mataUang} {props.oneDollars}</i></small>\n                    </div>\n                    <div className=\"col-2 text-center cardMinus\">\n                        <button className=\"btn btn-danger\" onClick={props.clickDelete}>(-)</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default cards;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Cards from './components/Cards/Cards';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.addForm = React.createRef()\n        this.name = React.createRef()\n        this.definition = React.createRef()\n\n\n    }\n\n    state = {\n        rates: {},\n        reqSymbols: [\n            { name: 'CAD', definition: 'Canadian Dollar' },\n            { name: 'IDR', definition: 'Indonesian Rupiah' },\n            { name: 'GBP', definition: 'Pound Sterling' },\n        ],\n        usd: 10000\n    }\n\n    componentDidMount() {\n        axios.get('https://api.exchangeratesapi.io/latest?base=USD&symbols=CAD,IDR,GBP,CHF,SGD,INR,MYR,JPY,KRW')\n            .then(response => {\n                this.setState({ rates: response.data.rates })\n                console.log(response);\n            });\n\n    }\n\n    addCurency = (e) => {\n        e.preventDefault();\n\n        let reqSymbols = this.state.reqSymbols;\n        let name = this.name.current.value.toUpperCase();\n        let definition = this.definition.current.value;\n\n        let add = {\n            name,\n            definition\n        }\n        reqSymbols.push(add)\n\n        console.log(\"Nama Currency: \"+name)\n        console.log(\"Definisi: \"+definition)\n\n        this.setState({\n            reqSymbols: reqSymbols\n        });\n\n        this.addForm.current.reset();\n    }\n\n    removeSymbol = (i) => {\n        let reqSymbols = this.state.reqSymbols;\n        reqSymbols.splice(i, 1);\n        this.setState({\n            reqSymbols: reqSymbols\n        });\n    }\n\n    render() {\n\n        const rates = Object.keys(this.state.rates).map((key, index) => {\n\n            let idx = this.state.reqSymbols.findIndex(x => x.name == key)\n            if (idx > -1) {\n                return <Cards\n                    oneDollars={this.state.rates[key]}\n                    mataUang={key}\n                    definition={this.state.reqSymbols[idx].definition}\n                    key={index}\n                    usd={this.state.usd}\n                    clickDelete={this.removeSymbol.bind(this, idx)} />;\n            }\n\n        })\n\n        const opts = Object.keys(this.state.rates).map((key, index) => {\n            let idx = this.state.reqSymbols.findIndex(x => x.name == key)\n            if(idx == -1) {\n                return <option value={key}>{key}</option> \n            }\n        })\n\n        return (\n            <div className=\"row\">\n                <div className=\"col align-self-start\">\n\n                </div>\n                <div className=\"col align-self-center\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <small><i>USD - United States Dollars</i></small>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <h5>USD</h5>\n                                </div>\n                                <div className=\"col\">\n                                    <h5 style={{ textAlign: \"right\" }}>{this.state.usd.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h5>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card-body\">\n                            {rates}\n                            <form ref={this.addForm}>\n                                <select ref={this.name} className=\"form-control inputMargin-10\">\n                                    {opts}\n                                </select>\n                                <input type=\"text\" ref={this.definition} className=\"form-control inputMargin-10\" placeholder=\"Definition\" />\n                                <button className=\"btn btn-block btn-primary\" onClick={this.addCurency} type=\"button\">Submit</button>\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col align-self-end\">\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}